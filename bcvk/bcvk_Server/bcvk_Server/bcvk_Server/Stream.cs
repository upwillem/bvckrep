/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace bcvkStream
{
  public partial class Stream {
    public interface Iface {
      void SendStream(string sender, string recipient, byte[] stream);
      #if SILVERLIGHT
      IAsyncResult Begin_SendStream(AsyncCallback callback, object state, string sender, string recipient, byte[] stream);
      void End_SendStream(IAsyncResult asyncResult);
      #endif
      void SendVideo(string sender, string recipient, byte[] video);
      #if SILVERLIGHT
      IAsyncResult Begin_SendVideo(AsyncCallback callback, object state, string sender, string recipient, byte[] video);
      void End_SendVideo(IAsyncResult asyncResult);
      #endif
      byte[] GetStream(string sender, string recipient);
      #if SILVERLIGHT
      IAsyncResult Begin_GetStream(AsyncCallback callback, object state, string sender, string recipient);
      byte[] End_GetStream(IAsyncResult asyncResult);
      #endif
      byte[] GetVideo(string sender, string recipient);
      #if SILVERLIGHT
      IAsyncResult Begin_GetVideo(AsyncCallback callback, object state, string sender, string recipient);
      byte[] End_GetVideo(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_SendStream(AsyncCallback callback, object state, string sender, string recipient, byte[] stream)
      {
        return send_SendStream(callback, state, sender, recipient, stream);
      }

      public void End_SendStream(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SendStream();
      }

      #endif

      public void SendStream(string sender, string recipient, byte[] stream)
      {
        #if !SILVERLIGHT
        send_SendStream(sender, recipient, stream);
        recv_SendStream();

        #else
        var asyncResult = Begin_SendStream(null, null, sender, recipient, stream);
        End_SendStream(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SendStream(AsyncCallback callback, object state, string sender, string recipient, byte[] stream)
      #else
      public void send_SendStream(string sender, string recipient, byte[] stream)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SendStream", TMessageType.Call, seqid_));
        SendStream_args args = new SendStream_args();
        args.Sender = sender;
        args.Recipient = recipient;
        args.Stream = stream;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_SendStream()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SendStream_result result = new SendStream_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SendVideo(AsyncCallback callback, object state, string sender, string recipient, byte[] video)
      {
        return send_SendVideo(callback, state, sender, recipient, video);
      }

      public void End_SendVideo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SendVideo();
      }

      #endif

      public void SendVideo(string sender, string recipient, byte[] video)
      {
        #if !SILVERLIGHT
        send_SendVideo(sender, recipient, video);
        recv_SendVideo();

        #else
        var asyncResult = Begin_SendVideo(null, null, sender, recipient, video);
        End_SendVideo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SendVideo(AsyncCallback callback, object state, string sender, string recipient, byte[] video)
      #else
      public void send_SendVideo(string sender, string recipient, byte[] video)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SendVideo", TMessageType.Call, seqid_));
        SendVideo_args args = new SendVideo_args();
        args.Sender = sender;
        args.Recipient = recipient;
        args.Video = video;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_SendVideo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SendVideo_result result = new SendVideo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetStream(AsyncCallback callback, object state, string sender, string recipient)
      {
        return send_GetStream(callback, state, sender, recipient);
      }

      public byte[] End_GetStream(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetStream();
      }

      #endif

      public byte[] GetStream(string sender, string recipient)
      {
        #if !SILVERLIGHT
        send_GetStream(sender, recipient);
        return recv_GetStream();

        #else
        var asyncResult = Begin_GetStream(null, null, sender, recipient);
        return End_GetStream(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetStream(AsyncCallback callback, object state, string sender, string recipient)
      #else
      public void send_GetStream(string sender, string recipient)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetStream", TMessageType.Call, seqid_));
        GetStream_args args = new GetStream_args();
        args.Sender = sender;
        args.Recipient = recipient;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetStream()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetStream_result result = new GetStream_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetStream failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetVideo(AsyncCallback callback, object state, string sender, string recipient)
      {
        return send_GetVideo(callback, state, sender, recipient);
      }

      public byte[] End_GetVideo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetVideo();
      }

      #endif

      public byte[] GetVideo(string sender, string recipient)
      {
        #if !SILVERLIGHT
        send_GetVideo(sender, recipient);
        return recv_GetVideo();

        #else
        var asyncResult = Begin_GetVideo(null, null, sender, recipient);
        return End_GetVideo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetVideo(AsyncCallback callback, object state, string sender, string recipient)
      #else
      public void send_GetVideo(string sender, string recipient)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetVideo", TMessageType.Call, seqid_));
        GetVideo_args args = new GetVideo_args();
        args.Sender = sender;
        args.Recipient = recipient;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetVideo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetVideo_result result = new GetVideo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetVideo failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["SendStream"] = SendStream_Process;
        processMap_["SendVideo"] = SendVideo_Process;
        processMap_["GetStream"] = GetStream_Process;
        processMap_["GetVideo"] = GetVideo_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void SendStream_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SendStream_args args = new SendStream_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SendStream_result result = new SendStream_result();
        iface_.SendStream(args.Sender, args.Recipient, args.Stream);
        oprot.WriteMessageBegin(new TMessage("SendStream", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SendVideo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SendVideo_args args = new SendVideo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SendVideo_result result = new SendVideo_result();
        iface_.SendVideo(args.Sender, args.Recipient, args.Video);
        oprot.WriteMessageBegin(new TMessage("SendVideo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetStream_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetStream_args args = new GetStream_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetStream_result result = new GetStream_result();
        result.Success = iface_.GetStream(args.Sender, args.Recipient);
        oprot.WriteMessageBegin(new TMessage("GetStream", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetVideo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetVideo_args args = new GetVideo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetVideo_result result = new GetVideo_result();
        result.Success = iface_.GetVideo(args.Sender, args.Recipient);
        oprot.WriteMessageBegin(new TMessage("GetVideo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SendStream_args : TBase
    {
      private string _sender;
      private string _recipient;
      private byte[] _stream;

      public string Sender
      {
        get
        {
          return _sender;
        }
        set
        {
          __isset.sender = true;
          this._sender = value;
        }
      }

      public string Recipient
      {
        get
        {
          return _recipient;
        }
        set
        {
          __isset.recipient = true;
          this._recipient = value;
        }
      }

      public byte[] Stream
      {
        get
        {
          return _stream;
        }
        set
        {
          __isset.stream = true;
          this._stream = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sender;
        public bool recipient;
        public bool stream;
      }

      public SendStream_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Sender = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Recipient = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Stream = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SendStream_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sender != null && __isset.sender) {
          field.Name = "sender";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sender);
          oprot.WriteFieldEnd();
        }
        if (Recipient != null && __isset.recipient) {
          field.Name = "recipient";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Recipient);
          oprot.WriteFieldEnd();
        }
        if (Stream != null && __isset.stream) {
          field.Name = "stream";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Stream);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SendStream_args(");
        bool __first = true;
        if (Sender != null && __isset.sender) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sender: ");
          __sb.Append(Sender);
        }
        if (Recipient != null && __isset.recipient) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Recipient: ");
          __sb.Append(Recipient);
        }
        if (Stream != null && __isset.stream) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Stream: ");
          __sb.Append(Stream);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SendStream_result : TBase
    {

      public SendStream_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SendStream_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SendStream_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SendVideo_args : TBase
    {
      private string _sender;
      private string _recipient;
      private byte[] _video;

      public string Sender
      {
        get
        {
          return _sender;
        }
        set
        {
          __isset.sender = true;
          this._sender = value;
        }
      }

      public string Recipient
      {
        get
        {
          return _recipient;
        }
        set
        {
          __isset.recipient = true;
          this._recipient = value;
        }
      }

      public byte[] Video
      {
        get
        {
          return _video;
        }
        set
        {
          __isset.video = true;
          this._video = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sender;
        public bool recipient;
        public bool video;
      }

      public SendVideo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Sender = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Recipient = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Video = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SendVideo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sender != null && __isset.sender) {
          field.Name = "sender";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sender);
          oprot.WriteFieldEnd();
        }
        if (Recipient != null && __isset.recipient) {
          field.Name = "recipient";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Recipient);
          oprot.WriteFieldEnd();
        }
        if (Video != null && __isset.video) {
          field.Name = "video";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Video);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SendVideo_args(");
        bool __first = true;
        if (Sender != null && __isset.sender) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sender: ");
          __sb.Append(Sender);
        }
        if (Recipient != null && __isset.recipient) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Recipient: ");
          __sb.Append(Recipient);
        }
        if (Video != null && __isset.video) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Video: ");
          __sb.Append(Video);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SendVideo_result : TBase
    {

      public SendVideo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SendVideo_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SendVideo_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetStream_args : TBase
    {
      private string _sender;
      private string _recipient;

      public string Sender
      {
        get
        {
          return _sender;
        }
        set
        {
          __isset.sender = true;
          this._sender = value;
        }
      }

      public string Recipient
      {
        get
        {
          return _recipient;
        }
        set
        {
          __isset.recipient = true;
          this._recipient = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sender;
        public bool recipient;
      }

      public GetStream_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Sender = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Recipient = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetStream_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sender != null && __isset.sender) {
          field.Name = "sender";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sender);
          oprot.WriteFieldEnd();
        }
        if (Recipient != null && __isset.recipient) {
          field.Name = "recipient";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Recipient);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetStream_args(");
        bool __first = true;
        if (Sender != null && __isset.sender) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sender: ");
          __sb.Append(Sender);
        }
        if (Recipient != null && __isset.recipient) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Recipient: ");
          __sb.Append(Recipient);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetStream_result : TBase
    {
      private byte[] _success;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetStream_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetStream_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetStream_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetVideo_args : TBase
    {
      private string _sender;
      private string _recipient;

      public string Sender
      {
        get
        {
          return _sender;
        }
        set
        {
          __isset.sender = true;
          this._sender = value;
        }
      }

      public string Recipient
      {
        get
        {
          return _recipient;
        }
        set
        {
          __isset.recipient = true;
          this._recipient = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sender;
        public bool recipient;
      }

      public GetVideo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Sender = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Recipient = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetVideo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sender != null && __isset.sender) {
          field.Name = "sender";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sender);
          oprot.WriteFieldEnd();
        }
        if (Recipient != null && __isset.recipient) {
          field.Name = "recipient";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Recipient);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetVideo_args(");
        bool __first = true;
        if (Sender != null && __isset.sender) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sender: ");
          __sb.Append(Sender);
        }
        if (Recipient != null && __isset.recipient) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Recipient: ");
          __sb.Append(Recipient);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetVideo_result : TBase
    {
      private byte[] _success;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetVideo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetVideo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetVideo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
