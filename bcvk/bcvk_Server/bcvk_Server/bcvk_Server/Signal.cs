/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace bcvkSignal
{
  public partial class Signal {
    public interface Iface {
      void CreateMainAccount(string username, string password1, string password2, string email, string name);
      #if SILVERLIGHT
      IAsyncResult Begin_CreateMainAccount(AsyncCallback callback, object state, string username, string password1, string password2, string email, string name);
      void End_CreateMainAccount(IAsyncResult asyncResult);
      #endif
      void CreateSubAccount(string username, string password1, string password2, string name, byte[] profileImage);
      #if SILVERLIGHT
      IAsyncResult Begin_CreateSubAccount(AsyncCallback callback, object state, string username, string password1, string password2, string name, byte[] profileImage);
      void End_CreateSubAccount(IAsyncResult asyncResult);
      #endif
      List<string> Login(string username, string password);
      #if SILVERLIGHT
      IAsyncResult Begin_Login(AsyncCallback callback, object state, string username, string password);
      List<string> End_Login(IAsyncResult asyncResult);
      #endif
      void LogOut(string username);
      #if SILVERLIGHT
      IAsyncResult Begin_LogOut(AsyncCallback callback, object state, string username);
      void End_LogOut(IAsyncResult asyncResult);
      #endif
      List<string> GetAccountData(string username);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountData(AsyncCallback callback, object state, string username);
      List<string> End_GetAccountData(IAsyncResult asyncResult);
      #endif
      int DoCall(string sender, string recipient);
      #if SILVERLIGHT
      IAsyncResult Begin_DoCall(AsyncCallback callback, object state, string sender, string recipient);
      int End_DoCall(IAsyncResult asyncResult);
      #endif
      void AnswerCall(string sender, string recipient, int callId, string answer);
      #if SILVERLIGHT
      IAsyncResult Begin_AnswerCall(AsyncCallback callback, object state, string sender, string recipient, int callId, string answer);
      void End_AnswerCall(IAsyncResult asyncResult);
      #endif
      string GetCallStatus(int callId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetCallStatus(AsyncCallback callback, object state, int callId);
      string End_GetCallStatus(IAsyncResult asyncResult);
      #endif
      void EndCall(string sender, string recipient, int callId);
      #if SILVERLIGHT
      IAsyncResult Begin_EndCall(AsyncCallback callback, object state, string sender, string recipient, int callId);
      void End_EndCall(IAsyncResult asyncResult);
      #endif
      bool ToggleBlock(string sender, string recipient);
      #if SILVERLIGHT
      IAsyncResult Begin_ToggleBlock(AsyncCallback callback, object state, string sender, string recipient);
      bool End_ToggleBlock(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_CreateMainAccount(AsyncCallback callback, object state, string username, string password1, string password2, string email, string name)
      {
        return send_CreateMainAccount(callback, state, username, password1, password2, email, name);
      }

      public void End_CreateMainAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_CreateMainAccount();
      }

      #endif

      public void CreateMainAccount(string username, string password1, string password2, string email, string name)
      {
        #if !SILVERLIGHT
        send_CreateMainAccount(username, password1, password2, email, name);
        recv_CreateMainAccount();

        #else
        var asyncResult = Begin_CreateMainAccount(null, null, username, password1, password2, email, name);
        End_CreateMainAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CreateMainAccount(AsyncCallback callback, object state, string username, string password1, string password2, string email, string name)
      #else
      public void send_CreateMainAccount(string username, string password1, string password2, string email, string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CreateMainAccount", TMessageType.Call, seqid_));
        CreateMainAccount_args args = new CreateMainAccount_args();
        args.Username = username;
        args.Password1 = password1;
        args.Password2 = password2;
        args.Email = email;
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_CreateMainAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateMainAccount_result result = new CreateMainAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CreateSubAccount(AsyncCallback callback, object state, string username, string password1, string password2, string name, byte[] profileImage)
      {
        return send_CreateSubAccount(callback, state, username, password1, password2, name, profileImage);
      }

      public void End_CreateSubAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_CreateSubAccount();
      }

      #endif

      public void CreateSubAccount(string username, string password1, string password2, string name, byte[] profileImage)
      {
        #if !SILVERLIGHT
        send_CreateSubAccount(username, password1, password2, name, profileImage);
        recv_CreateSubAccount();

        #else
        var asyncResult = Begin_CreateSubAccount(null, null, username, password1, password2, name, profileImage);
        End_CreateSubAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CreateSubAccount(AsyncCallback callback, object state, string username, string password1, string password2, string name, byte[] profileImage)
      #else
      public void send_CreateSubAccount(string username, string password1, string password2, string name, byte[] profileImage)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CreateSubAccount", TMessageType.Call, seqid_));
        CreateSubAccount_args args = new CreateSubAccount_args();
        args.Username = username;
        args.Password1 = password1;
        args.Password2 = password2;
        args.Name = name;
        args.ProfileImage = profileImage;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_CreateSubAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateSubAccount_result result = new CreateSubAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Login(AsyncCallback callback, object state, string username, string password)
      {
        return send_Login(callback, state, username, password);
      }

      public List<string> End_Login(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Login();
      }

      #endif

      public List<string> Login(string username, string password)
      {
        #if !SILVERLIGHT
        send_Login(username, password);
        return recv_Login();

        #else
        var asyncResult = Begin_Login(null, null, username, password);
        return End_Login(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Login(AsyncCallback callback, object state, string username, string password)
      #else
      public void send_Login(string username, string password)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Login", TMessageType.Call, seqid_));
        Login_args args = new Login_args();
        args.Username = username;
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_Login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Login_result result = new Login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Login failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_LogOut(AsyncCallback callback, object state, string username)
      {
        return send_LogOut(callback, state, username);
      }

      public void End_LogOut(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_LogOut();
      }

      #endif

      public void LogOut(string username)
      {
        #if !SILVERLIGHT
        send_LogOut(username);
        recv_LogOut();

        #else
        var asyncResult = Begin_LogOut(null, null, username);
        End_LogOut(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LogOut(AsyncCallback callback, object state, string username)
      #else
      public void send_LogOut(string username)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LogOut", TMessageType.Call, seqid_));
        LogOut_args args = new LogOut_args();
        args.Username = username;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_LogOut()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LogOut_result result = new LogOut_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountData(AsyncCallback callback, object state, string username)
      {
        return send_GetAccountData(callback, state, username);
      }

      public List<string> End_GetAccountData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountData();
      }

      #endif

      public List<string> GetAccountData(string username)
      {
        #if !SILVERLIGHT
        send_GetAccountData(username);
        return recv_GetAccountData();

        #else
        var asyncResult = Begin_GetAccountData(null, null, username);
        return End_GetAccountData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountData(AsyncCallback callback, object state, string username)
      #else
      public void send_GetAccountData(string username)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountData", TMessageType.Call, seqid_));
        GetAccountData_args args = new GetAccountData_args();
        args.Username = username;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_GetAccountData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountData_result result = new GetAccountData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DoCall(AsyncCallback callback, object state, string sender, string recipient)
      {
        return send_DoCall(callback, state, sender, recipient);
      }

      public int End_DoCall(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DoCall();
      }

      #endif

      public int DoCall(string sender, string recipient)
      {
        #if !SILVERLIGHT
        send_DoCall(sender, recipient);
        return recv_DoCall();

        #else
        var asyncResult = Begin_DoCall(null, null, sender, recipient);
        return End_DoCall(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DoCall(AsyncCallback callback, object state, string sender, string recipient)
      #else
      public void send_DoCall(string sender, string recipient)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DoCall", TMessageType.Call, seqid_));
        DoCall_args args = new DoCall_args();
        args.Sender = sender;
        args.Recipient = recipient;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_DoCall()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DoCall_result result = new DoCall_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DoCall failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AnswerCall(AsyncCallback callback, object state, string sender, string recipient, int callId, string answer)
      {
        return send_AnswerCall(callback, state, sender, recipient, callId, answer);
      }

      public void End_AnswerCall(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_AnswerCall();
      }

      #endif

      public void AnswerCall(string sender, string recipient, int callId, string answer)
      {
        #if !SILVERLIGHT
        send_AnswerCall(sender, recipient, callId, answer);
        recv_AnswerCall();

        #else
        var asyncResult = Begin_AnswerCall(null, null, sender, recipient, callId, answer);
        End_AnswerCall(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AnswerCall(AsyncCallback callback, object state, string sender, string recipient, int callId, string answer)
      #else
      public void send_AnswerCall(string sender, string recipient, int callId, string answer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AnswerCall", TMessageType.Call, seqid_));
        AnswerCall_args args = new AnswerCall_args();
        args.Sender = sender;
        args.Recipient = recipient;
        args.CallId = callId;
        args.Answer = answer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_AnswerCall()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AnswerCall_result result = new AnswerCall_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetCallStatus(AsyncCallback callback, object state, int callId)
      {
        return send_GetCallStatus(callback, state, callId);
      }

      public string End_GetCallStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCallStatus();
      }

      #endif

      public string GetCallStatus(int callId)
      {
        #if !SILVERLIGHT
        send_GetCallStatus(callId);
        return recv_GetCallStatus();

        #else
        var asyncResult = Begin_GetCallStatus(null, null, callId);
        return End_GetCallStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCallStatus(AsyncCallback callback, object state, int callId)
      #else
      public void send_GetCallStatus(int callId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetCallStatus", TMessageType.Call, seqid_));
        GetCallStatus_args args = new GetCallStatus_args();
        args.CallId = callId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetCallStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCallStatus_result result = new GetCallStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCallStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EndCall(AsyncCallback callback, object state, string sender, string recipient, int callId)
      {
        return send_EndCall(callback, state, sender, recipient, callId);
      }

      public void End_EndCall(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_EndCall();
      }

      #endif

      public void EndCall(string sender, string recipient, int callId)
      {
        #if !SILVERLIGHT
        send_EndCall(sender, recipient, callId);
        recv_EndCall();

        #else
        var asyncResult = Begin_EndCall(null, null, sender, recipient, callId);
        End_EndCall(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EndCall(AsyncCallback callback, object state, string sender, string recipient, int callId)
      #else
      public void send_EndCall(string sender, string recipient, int callId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EndCall", TMessageType.Call, seqid_));
        EndCall_args args = new EndCall_args();
        args.Sender = sender;
        args.Recipient = recipient;
        args.CallId = callId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_EndCall()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EndCall_result result = new EndCall_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ToggleBlock(AsyncCallback callback, object state, string sender, string recipient)
      {
        return send_ToggleBlock(callback, state, sender, recipient);
      }

      public bool End_ToggleBlock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ToggleBlock();
      }

      #endif

      public bool ToggleBlock(string sender, string recipient)
      {
        #if !SILVERLIGHT
        send_ToggleBlock(sender, recipient);
        return recv_ToggleBlock();

        #else
        var asyncResult = Begin_ToggleBlock(null, null, sender, recipient);
        return End_ToggleBlock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ToggleBlock(AsyncCallback callback, object state, string sender, string recipient)
      #else
      public void send_ToggleBlock(string sender, string recipient)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ToggleBlock", TMessageType.Call, seqid_));
        ToggleBlock_args args = new ToggleBlock_args();
        args.Sender = sender;
        args.Recipient = recipient;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_ToggleBlock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ToggleBlock_result result = new ToggleBlock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ToggleBlock failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["CreateMainAccount"] = CreateMainAccount_Process;
        processMap_["CreateSubAccount"] = CreateSubAccount_Process;
        processMap_["Login"] = Login_Process;
        processMap_["LogOut"] = LogOut_Process;
        processMap_["GetAccountData"] = GetAccountData_Process;
        processMap_["DoCall"] = DoCall_Process;
        processMap_["AnswerCall"] = AnswerCall_Process;
        processMap_["GetCallStatus"] = GetCallStatus_Process;
        processMap_["EndCall"] = EndCall_Process;
        processMap_["ToggleBlock"] = ToggleBlock_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void CreateMainAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateMainAccount_args args = new CreateMainAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateMainAccount_result result = new CreateMainAccount_result();
        iface_.CreateMainAccount(args.Username, args.Password1, args.Password2, args.Email, args.Name);
        oprot.WriteMessageBegin(new TMessage("CreateMainAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CreateSubAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateSubAccount_args args = new CreateSubAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateSubAccount_result result = new CreateSubAccount_result();
        iface_.CreateSubAccount(args.Username, args.Password1, args.Password2, args.Name, args.ProfileImage);
        oprot.WriteMessageBegin(new TMessage("CreateSubAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Login_args args = new Login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Login_result result = new Login_result();
        result.Success = iface_.Login(args.Username, args.Password);
        oprot.WriteMessageBegin(new TMessage("Login", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LogOut_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LogOut_args args = new LogOut_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LogOut_result result = new LogOut_result();
        iface_.LogOut(args.Username);
        oprot.WriteMessageBegin(new TMessage("LogOut", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAccountData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountData_args args = new GetAccountData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountData_result result = new GetAccountData_result();
        result.Success = iface_.GetAccountData(args.Username);
        oprot.WriteMessageBegin(new TMessage("GetAccountData", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DoCall_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DoCall_args args = new DoCall_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DoCall_result result = new DoCall_result();
        result.Success = iface_.DoCall(args.Sender, args.Recipient);
        oprot.WriteMessageBegin(new TMessage("DoCall", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AnswerCall_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AnswerCall_args args = new AnswerCall_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AnswerCall_result result = new AnswerCall_result();
        iface_.AnswerCall(args.Sender, args.Recipient, args.CallId, args.Answer);
        oprot.WriteMessageBegin(new TMessage("AnswerCall", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCallStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCallStatus_args args = new GetCallStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCallStatus_result result = new GetCallStatus_result();
        result.Success = iface_.GetCallStatus(args.CallId);
        oprot.WriteMessageBegin(new TMessage("GetCallStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EndCall_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EndCall_args args = new EndCall_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EndCall_result result = new EndCall_result();
        iface_.EndCall(args.Sender, args.Recipient, args.CallId);
        oprot.WriteMessageBegin(new TMessage("EndCall", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ToggleBlock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ToggleBlock_args args = new ToggleBlock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ToggleBlock_result result = new ToggleBlock_result();
        result.Success = iface_.ToggleBlock(args.Sender, args.Recipient);
        oprot.WriteMessageBegin(new TMessage("ToggleBlock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateMainAccount_args : TBase
    {
      private string _username;
      private string _password1;
      private string _password2;
      private string _email;
      private string _name;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Password1
      {
        get
        {
          return _password1;
        }
        set
        {
          __isset.password1 = true;
          this._password1 = value;
        }
      }

      public string Password2
      {
        get
        {
          return _password2;
        }
        set
        {
          __isset.password2 = true;
          this._password2 = value;
        }
      }

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool password1;
        public bool password2;
        public bool email;
        public bool name;
      }

      public CreateMainAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Password1 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Password2 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateMainAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Password1 != null && __isset.password1) {
          field.Name = "password1";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password1);
          oprot.WriteFieldEnd();
        }
        if (Password2 != null && __isset.password2) {
          field.Name = "password2";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password2);
          oprot.WriteFieldEnd();
        }
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateMainAccount_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (Password1 != null && __isset.password1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password1: ");
          __sb.Append(Password1);
        }
        if (Password2 != null && __isset.password2) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password2: ");
          __sb.Append(Password2);
        }
        if (Email != null && __isset.email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateMainAccount_result : TBase
    {

      public CreateMainAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateMainAccount_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateMainAccount_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateSubAccount_args : TBase
    {
      private string _username;
      private string _password1;
      private string _password2;
      private string _name;
      private byte[] _profileImage;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Password1
      {
        get
        {
          return _password1;
        }
        set
        {
          __isset.password1 = true;
          this._password1 = value;
        }
      }

      public string Password2
      {
        get
        {
          return _password2;
        }
        set
        {
          __isset.password2 = true;
          this._password2 = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public byte[] ProfileImage
      {
        get
        {
          return _profileImage;
        }
        set
        {
          __isset.profileImage = true;
          this._profileImage = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool password1;
        public bool password2;
        public bool name;
        public bool profileImage;
      }

      public CreateSubAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Password1 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Password2 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                ProfileImage = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateSubAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Password1 != null && __isset.password1) {
          field.Name = "password1";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password1);
          oprot.WriteFieldEnd();
        }
        if (Password2 != null && __isset.password2) {
          field.Name = "password2";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password2);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (ProfileImage != null && __isset.profileImage) {
          field.Name = "profileImage";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(ProfileImage);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateSubAccount_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (Password1 != null && __isset.password1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password1: ");
          __sb.Append(Password1);
        }
        if (Password2 != null && __isset.password2) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password2: ");
          __sb.Append(Password2);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (ProfileImage != null && __isset.profileImage) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileImage: ");
          __sb.Append(ProfileImage);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateSubAccount_result : TBase
    {

      public CreateSubAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateSubAccount_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateSubAccount_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Login_args : TBase
    {
      private string _username;
      private string _password;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool password;
      }

      public Login_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Login_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Login_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Login_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Login_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    string _elem2;
                    _elem2 = iprot.ReadString();
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Login_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter3 in Success)
              {
                oprot.WriteString(_iter3);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Login_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LogOut_args : TBase
    {
      private string _username;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
      }

      public LogOut_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LogOut_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("LogOut_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LogOut_result : TBase
    {

      public LogOut_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LogOut_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("LogOut_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountData_args : TBase
    {
      private string _username;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
      }

      public GetAccountData_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountData_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAccountData_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountData_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountData_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    string _elem6;
                    _elem6 = iprot.ReadString();
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountData_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter7 in Success)
              {
                oprot.WriteString(_iter7);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAccountData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DoCall_args : TBase
    {
      private string _sender;
      private string _recipient;

      public string Sender
      {
        get
        {
          return _sender;
        }
        set
        {
          __isset.sender = true;
          this._sender = value;
        }
      }

      public string Recipient
      {
        get
        {
          return _recipient;
        }
        set
        {
          __isset.recipient = true;
          this._recipient = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sender;
        public bool recipient;
      }

      public DoCall_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Sender = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Recipient = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DoCall_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sender != null && __isset.sender) {
          field.Name = "sender";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sender);
          oprot.WriteFieldEnd();
        }
        if (Recipient != null && __isset.recipient) {
          field.Name = "recipient";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Recipient);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DoCall_args(");
        bool __first = true;
        if (Sender != null && __isset.sender) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sender: ");
          __sb.Append(Sender);
        }
        if (Recipient != null && __isset.recipient) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Recipient: ");
          __sb.Append(Recipient);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DoCall_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DoCall_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DoCall_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DoCall_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AnswerCall_args : TBase
    {
      private string _sender;
      private string _recipient;
      private int _callId;
      private string _answer;

      public string Sender
      {
        get
        {
          return _sender;
        }
        set
        {
          __isset.sender = true;
          this._sender = value;
        }
      }

      public string Recipient
      {
        get
        {
          return _recipient;
        }
        set
        {
          __isset.recipient = true;
          this._recipient = value;
        }
      }

      public int CallId
      {
        get
        {
          return _callId;
        }
        set
        {
          __isset.callId = true;
          this._callId = value;
        }
      }

      public string Answer
      {
        get
        {
          return _answer;
        }
        set
        {
          __isset.answer = true;
          this._answer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sender;
        public bool recipient;
        public bool callId;
        public bool answer;
      }

      public AnswerCall_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Sender = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Recipient = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                CallId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Answer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AnswerCall_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sender != null && __isset.sender) {
          field.Name = "sender";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sender);
          oprot.WriteFieldEnd();
        }
        if (Recipient != null && __isset.recipient) {
          field.Name = "recipient";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Recipient);
          oprot.WriteFieldEnd();
        }
        if (__isset.callId) {
          field.Name = "callId";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CallId);
          oprot.WriteFieldEnd();
        }
        if (Answer != null && __isset.answer) {
          field.Name = "answer";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Answer);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AnswerCall_args(");
        bool __first = true;
        if (Sender != null && __isset.sender) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sender: ");
          __sb.Append(Sender);
        }
        if (Recipient != null && __isset.recipient) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Recipient: ");
          __sb.Append(Recipient);
        }
        if (__isset.callId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CallId: ");
          __sb.Append(CallId);
        }
        if (Answer != null && __isset.answer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Answer: ");
          __sb.Append(Answer);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AnswerCall_result : TBase
    {

      public AnswerCall_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AnswerCall_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AnswerCall_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCallStatus_args : TBase
    {
      private int _callId;

      public int CallId
      {
        get
        {
          return _callId;
        }
        set
        {
          __isset.callId = true;
          this._callId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool callId;
      }

      public GetCallStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                CallId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCallStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.callId) {
          field.Name = "callId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CallId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCallStatus_args(");
        bool __first = true;
        if (__isset.callId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CallId: ");
          __sb.Append(CallId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCallStatus_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCallStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCallStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCallStatus_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EndCall_args : TBase
    {
      private string _sender;
      private string _recipient;
      private int _callId;

      public string Sender
      {
        get
        {
          return _sender;
        }
        set
        {
          __isset.sender = true;
          this._sender = value;
        }
      }

      public string Recipient
      {
        get
        {
          return _recipient;
        }
        set
        {
          __isset.recipient = true;
          this._recipient = value;
        }
      }

      public int CallId
      {
        get
        {
          return _callId;
        }
        set
        {
          __isset.callId = true;
          this._callId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sender;
        public bool recipient;
        public bool callId;
      }

      public EndCall_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Sender = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Recipient = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                CallId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EndCall_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sender != null && __isset.sender) {
          field.Name = "sender";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sender);
          oprot.WriteFieldEnd();
        }
        if (Recipient != null && __isset.recipient) {
          field.Name = "recipient";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Recipient);
          oprot.WriteFieldEnd();
        }
        if (__isset.callId) {
          field.Name = "callId";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CallId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("EndCall_args(");
        bool __first = true;
        if (Sender != null && __isset.sender) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sender: ");
          __sb.Append(Sender);
        }
        if (Recipient != null && __isset.recipient) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Recipient: ");
          __sb.Append(Recipient);
        }
        if (__isset.callId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CallId: ");
          __sb.Append(CallId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EndCall_result : TBase
    {

      public EndCall_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EndCall_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("EndCall_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ToggleBlock_args : TBase
    {
      private string _sender;
      private string _recipient;

      public string Sender
      {
        get
        {
          return _sender;
        }
        set
        {
          __isset.sender = true;
          this._sender = value;
        }
      }

      public string Recipient
      {
        get
        {
          return _recipient;
        }
        set
        {
          __isset.recipient = true;
          this._recipient = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sender;
        public bool recipient;
      }

      public ToggleBlock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Sender = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Recipient = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ToggleBlock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sender != null && __isset.sender) {
          field.Name = "sender";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sender);
          oprot.WriteFieldEnd();
        }
        if (Recipient != null && __isset.recipient) {
          field.Name = "recipient";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Recipient);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ToggleBlock_args(");
        bool __first = true;
        if (Sender != null && __isset.sender) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sender: ");
          __sb.Append(Sender);
        }
        if (Recipient != null && __isset.recipient) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Recipient: ");
          __sb.Append(Recipient);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ToggleBlock_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ToggleBlock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ToggleBlock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ToggleBlock_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
